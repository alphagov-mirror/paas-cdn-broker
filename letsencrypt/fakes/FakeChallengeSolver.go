// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/18F/cf-cdn-service-broker/letsencrypt"
	"golang.org/x/crypto/acme"
)

type FakeChallengeSolver struct {
	AcceptStub        func(*acme.Challenge) bool
	acceptMutex       sync.RWMutex
	acceptArgsForCall []struct {
		arg1 *acme.Challenge
	}
	acceptReturns struct {
		result1 bool
	}
	acceptReturnsOnCall map[int]struct {
		result1 bool
	}
	TrySolveChallengeStub        func(*acme.Authorization, *acme.Challenge, letsencrypt.ClientInterface) (bool, error)
	trySolveChallengeMutex       sync.RWMutex
	trySolveChallengeArgsForCall []struct {
		arg1 *acme.Authorization
		arg2 *acme.Challenge
		arg3 letsencrypt.ClientInterface
	}
	trySolveChallengeReturns struct {
		result1 bool
		result2 error
	}
	trySolveChallengeReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeChallengeSolver) Accept(arg1 *acme.Challenge) bool {
	fake.acceptMutex.Lock()
	ret, specificReturn := fake.acceptReturnsOnCall[len(fake.acceptArgsForCall)]
	fake.acceptArgsForCall = append(fake.acceptArgsForCall, struct {
		arg1 *acme.Challenge
	}{arg1})
	fake.recordInvocation("Accept", []interface{}{arg1})
	fake.acceptMutex.Unlock()
	if fake.AcceptStub != nil {
		return fake.AcceptStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.acceptReturns
	return fakeReturns.result1
}

func (fake *FakeChallengeSolver) AcceptCallCount() int {
	fake.acceptMutex.RLock()
	defer fake.acceptMutex.RUnlock()
	return len(fake.acceptArgsForCall)
}

func (fake *FakeChallengeSolver) AcceptCalls(stub func(*acme.Challenge) bool) {
	fake.acceptMutex.Lock()
	defer fake.acceptMutex.Unlock()
	fake.AcceptStub = stub
}

func (fake *FakeChallengeSolver) AcceptArgsForCall(i int) *acme.Challenge {
	fake.acceptMutex.RLock()
	defer fake.acceptMutex.RUnlock()
	argsForCall := fake.acceptArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeChallengeSolver) AcceptReturns(result1 bool) {
	fake.acceptMutex.Lock()
	defer fake.acceptMutex.Unlock()
	fake.AcceptStub = nil
	fake.acceptReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeChallengeSolver) AcceptReturnsOnCall(i int, result1 bool) {
	fake.acceptMutex.Lock()
	defer fake.acceptMutex.Unlock()
	fake.AcceptStub = nil
	if fake.acceptReturnsOnCall == nil {
		fake.acceptReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.acceptReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeChallengeSolver) TrySolveChallenge(arg1 *acme.Authorization, arg2 *acme.Challenge, arg3 letsencrypt.ClientInterface) (bool, error) {
	fake.trySolveChallengeMutex.Lock()
	ret, specificReturn := fake.trySolveChallengeReturnsOnCall[len(fake.trySolveChallengeArgsForCall)]
	fake.trySolveChallengeArgsForCall = append(fake.trySolveChallengeArgsForCall, struct {
		arg1 *acme.Authorization
		arg2 *acme.Challenge
		arg3 letsencrypt.ClientInterface
	}{arg1, arg2, arg3})
	fake.recordInvocation("TrySolveChallenge", []interface{}{arg1, arg2, arg3})
	fake.trySolveChallengeMutex.Unlock()
	if fake.TrySolveChallengeStub != nil {
		return fake.TrySolveChallengeStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.trySolveChallengeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeChallengeSolver) TrySolveChallengeCallCount() int {
	fake.trySolveChallengeMutex.RLock()
	defer fake.trySolveChallengeMutex.RUnlock()
	return len(fake.trySolveChallengeArgsForCall)
}

func (fake *FakeChallengeSolver) TrySolveChallengeCalls(stub func(*acme.Authorization, *acme.Challenge, letsencrypt.ClientInterface) (bool, error)) {
	fake.trySolveChallengeMutex.Lock()
	defer fake.trySolveChallengeMutex.Unlock()
	fake.TrySolveChallengeStub = stub
}

func (fake *FakeChallengeSolver) TrySolveChallengeArgsForCall(i int) (*acme.Authorization, *acme.Challenge, letsencrypt.ClientInterface) {
	fake.trySolveChallengeMutex.RLock()
	defer fake.trySolveChallengeMutex.RUnlock()
	argsForCall := fake.trySolveChallengeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeChallengeSolver) TrySolveChallengeReturns(result1 bool, result2 error) {
	fake.trySolveChallengeMutex.Lock()
	defer fake.trySolveChallengeMutex.Unlock()
	fake.TrySolveChallengeStub = nil
	fake.trySolveChallengeReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeChallengeSolver) TrySolveChallengeReturnsOnCall(i int, result1 bool, result2 error) {
	fake.trySolveChallengeMutex.Lock()
	defer fake.trySolveChallengeMutex.Unlock()
	fake.TrySolveChallengeStub = nil
	if fake.trySolveChallengeReturnsOnCall == nil {
		fake.trySolveChallengeReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.trySolveChallengeReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeChallengeSolver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.acceptMutex.RLock()
	defer fake.acceptMutex.RUnlock()
	fake.trySolveChallengeMutex.RLock()
	defer fake.trySolveChallengeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeChallengeSolver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ letsencrypt.ChallengeSolverInterface = new(FakeChallengeSolver)
