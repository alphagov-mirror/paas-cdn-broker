// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/18F/cf-cdn-service-broker/letsencrypt"
	"github.com/18F/cf-cdn-service-broker/utils"
	"golang.org/x/crypto/acme"
)

type FakeAccountCreator struct {
	EnsureAccountStub        func(context.Context, utils.User) (*acme.Account, letsencrypt.ClientInterface, error)
	ensureAccountMutex       sync.RWMutex
	ensureAccountArgsForCall []struct {
		arg1 context.Context
		arg2 utils.User
	}
	ensureAccountReturns struct {
		result1 *acme.Account
		result2 letsencrypt.ClientInterface
		result3 error
	}
	ensureAccountReturnsOnCall map[int]struct {
		result1 *acme.Account
		result2 letsencrypt.ClientInterface
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAccountCreator) EnsureAccount(arg1 context.Context, arg2 utils.User) (*acme.Account, letsencrypt.ClientInterface, error) {
	fake.ensureAccountMutex.Lock()
	ret, specificReturn := fake.ensureAccountReturnsOnCall[len(fake.ensureAccountArgsForCall)]
	fake.ensureAccountArgsForCall = append(fake.ensureAccountArgsForCall, struct {
		arg1 context.Context
		arg2 utils.User
	}{arg1, arg2})
	fake.recordInvocation("EnsureAccount", []interface{}{arg1, arg2})
	fake.ensureAccountMutex.Unlock()
	if fake.EnsureAccountStub != nil {
		return fake.EnsureAccountStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.ensureAccountReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAccountCreator) EnsureAccountCallCount() int {
	fake.ensureAccountMutex.RLock()
	defer fake.ensureAccountMutex.RUnlock()
	return len(fake.ensureAccountArgsForCall)
}

func (fake *FakeAccountCreator) EnsureAccountCalls(stub func(context.Context, utils.User) (*acme.Account, letsencrypt.ClientInterface, error)) {
	fake.ensureAccountMutex.Lock()
	defer fake.ensureAccountMutex.Unlock()
	fake.EnsureAccountStub = stub
}

func (fake *FakeAccountCreator) EnsureAccountArgsForCall(i int) (context.Context, utils.User) {
	fake.ensureAccountMutex.RLock()
	defer fake.ensureAccountMutex.RUnlock()
	argsForCall := fake.ensureAccountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAccountCreator) EnsureAccountReturns(result1 *acme.Account, result2 letsencrypt.ClientInterface, result3 error) {
	fake.ensureAccountMutex.Lock()
	defer fake.ensureAccountMutex.Unlock()
	fake.EnsureAccountStub = nil
	fake.ensureAccountReturns = struct {
		result1 *acme.Account
		result2 letsencrypt.ClientInterface
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAccountCreator) EnsureAccountReturnsOnCall(i int, result1 *acme.Account, result2 letsencrypt.ClientInterface, result3 error) {
	fake.ensureAccountMutex.Lock()
	defer fake.ensureAccountMutex.Unlock()
	fake.EnsureAccountStub = nil
	if fake.ensureAccountReturnsOnCall == nil {
		fake.ensureAccountReturnsOnCall = make(map[int]struct {
			result1 *acme.Account
			result2 letsencrypt.ClientInterface
			result3 error
		})
	}
	fake.ensureAccountReturnsOnCall[i] = struct {
		result1 *acme.Account
		result2 letsencrypt.ClientInterface
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAccountCreator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.ensureAccountMutex.RLock()
	defer fake.ensureAccountMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAccountCreator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ letsencrypt.AccountCreatorInterface = new(FakeAccountCreator)
