// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"crypto/rsa"
	"crypto/x509"
	"sync"

	"github.com/18F/cf-cdn-service-broker/letsencrypt"
	"golang.org/x/crypto/acme"
)

type FakeCertificateObtainer struct {
	BeginCertificateOrderStub        func(context.Context, letsencrypt.ClientInterface, []string) (*acme.Order, error)
	beginCertificateOrderMutex       sync.RWMutex
	beginCertificateOrderArgsForCall []struct {
		arg1 context.Context
		arg2 letsencrypt.ClientInterface
		arg3 []string
	}
	beginCertificateOrderReturns struct {
		result1 *acme.Order
		result2 error
	}
	beginCertificateOrderReturnsOnCall map[int]struct {
		result1 *acme.Order
		result2 error
	}
	SolveAuthorizationsStub        func(context.Context, letsencrypt.ClientInterface, string) (*x509.Certificate, *rsa.PrivateKey, bool, error)
	solveAuthorizationsMutex       sync.RWMutex
	solveAuthorizationsArgsForCall []struct {
		arg1 context.Context
		arg2 letsencrypt.ClientInterface
		arg3 string
	}
	solveAuthorizationsReturns struct {
		result1 *x509.Certificate
		result2 *rsa.PrivateKey
		result3 bool
		result4 error
	}
	solveAuthorizationsReturnsOnCall map[int]struct {
		result1 *x509.Certificate
		result2 *rsa.PrivateKey
		result3 bool
		result4 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCertificateObtainer) BeginCertificateOrder(arg1 context.Context, arg2 letsencrypt.ClientInterface, arg3 []string) (*acme.Order, error) {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.beginCertificateOrderMutex.Lock()
	ret, specificReturn := fake.beginCertificateOrderReturnsOnCall[len(fake.beginCertificateOrderArgsForCall)]
	fake.beginCertificateOrderArgsForCall = append(fake.beginCertificateOrderArgsForCall, struct {
		arg1 context.Context
		arg2 letsencrypt.ClientInterface
		arg3 []string
	}{arg1, arg2, arg3Copy})
	fake.recordInvocation("BeginCertificateOrder", []interface{}{arg1, arg2, arg3Copy})
	fake.beginCertificateOrderMutex.Unlock()
	if fake.BeginCertificateOrderStub != nil {
		return fake.BeginCertificateOrderStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.beginCertificateOrderReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCertificateObtainer) BeginCertificateOrderCallCount() int {
	fake.beginCertificateOrderMutex.RLock()
	defer fake.beginCertificateOrderMutex.RUnlock()
	return len(fake.beginCertificateOrderArgsForCall)
}

func (fake *FakeCertificateObtainer) BeginCertificateOrderCalls(stub func(context.Context, letsencrypt.ClientInterface, []string) (*acme.Order, error)) {
	fake.beginCertificateOrderMutex.Lock()
	defer fake.beginCertificateOrderMutex.Unlock()
	fake.BeginCertificateOrderStub = stub
}

func (fake *FakeCertificateObtainer) BeginCertificateOrderArgsForCall(i int) (context.Context, letsencrypt.ClientInterface, []string) {
	fake.beginCertificateOrderMutex.RLock()
	defer fake.beginCertificateOrderMutex.RUnlock()
	argsForCall := fake.beginCertificateOrderArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCertificateObtainer) BeginCertificateOrderReturns(result1 *acme.Order, result2 error) {
	fake.beginCertificateOrderMutex.Lock()
	defer fake.beginCertificateOrderMutex.Unlock()
	fake.BeginCertificateOrderStub = nil
	fake.beginCertificateOrderReturns = struct {
		result1 *acme.Order
		result2 error
	}{result1, result2}
}

func (fake *FakeCertificateObtainer) BeginCertificateOrderReturnsOnCall(i int, result1 *acme.Order, result2 error) {
	fake.beginCertificateOrderMutex.Lock()
	defer fake.beginCertificateOrderMutex.Unlock()
	fake.BeginCertificateOrderStub = nil
	if fake.beginCertificateOrderReturnsOnCall == nil {
		fake.beginCertificateOrderReturnsOnCall = make(map[int]struct {
			result1 *acme.Order
			result2 error
		})
	}
	fake.beginCertificateOrderReturnsOnCall[i] = struct {
		result1 *acme.Order
		result2 error
	}{result1, result2}
}

func (fake *FakeCertificateObtainer) SolveAuthorizations(arg1 context.Context, arg2 letsencrypt.ClientInterface, arg3 string) (*x509.Certificate, *rsa.PrivateKey, bool, error) {
	fake.solveAuthorizationsMutex.Lock()
	ret, specificReturn := fake.solveAuthorizationsReturnsOnCall[len(fake.solveAuthorizationsArgsForCall)]
	fake.solveAuthorizationsArgsForCall = append(fake.solveAuthorizationsArgsForCall, struct {
		arg1 context.Context
		arg2 letsencrypt.ClientInterface
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("SolveAuthorizations", []interface{}{arg1, arg2, arg3})
	fake.solveAuthorizationsMutex.Unlock()
	if fake.SolveAuthorizationsStub != nil {
		return fake.SolveAuthorizationsStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	fakeReturns := fake.solveAuthorizationsReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3, fakeReturns.result4
}

func (fake *FakeCertificateObtainer) SolveAuthorizationsCallCount() int {
	fake.solveAuthorizationsMutex.RLock()
	defer fake.solveAuthorizationsMutex.RUnlock()
	return len(fake.solveAuthorizationsArgsForCall)
}

func (fake *FakeCertificateObtainer) SolveAuthorizationsCalls(stub func(context.Context, letsencrypt.ClientInterface, string) (*x509.Certificate, *rsa.PrivateKey, bool, error)) {
	fake.solveAuthorizationsMutex.Lock()
	defer fake.solveAuthorizationsMutex.Unlock()
	fake.SolveAuthorizationsStub = stub
}

func (fake *FakeCertificateObtainer) SolveAuthorizationsArgsForCall(i int) (context.Context, letsencrypt.ClientInterface, string) {
	fake.solveAuthorizationsMutex.RLock()
	defer fake.solveAuthorizationsMutex.RUnlock()
	argsForCall := fake.solveAuthorizationsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCertificateObtainer) SolveAuthorizationsReturns(result1 *x509.Certificate, result2 *rsa.PrivateKey, result3 bool, result4 error) {
	fake.solveAuthorizationsMutex.Lock()
	defer fake.solveAuthorizationsMutex.Unlock()
	fake.SolveAuthorizationsStub = nil
	fake.solveAuthorizationsReturns = struct {
		result1 *x509.Certificate
		result2 *rsa.PrivateKey
		result3 bool
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeCertificateObtainer) SolveAuthorizationsReturnsOnCall(i int, result1 *x509.Certificate, result2 *rsa.PrivateKey, result3 bool, result4 error) {
	fake.solveAuthorizationsMutex.Lock()
	defer fake.solveAuthorizationsMutex.Unlock()
	fake.SolveAuthorizationsStub = nil
	if fake.solveAuthorizationsReturnsOnCall == nil {
		fake.solveAuthorizationsReturnsOnCall = make(map[int]struct {
			result1 *x509.Certificate
			result2 *rsa.PrivateKey
			result3 bool
			result4 error
		})
	}
	fake.solveAuthorizationsReturnsOnCall[i] = struct {
		result1 *x509.Certificate
		result2 *rsa.PrivateKey
		result3 bool
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeCertificateObtainer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.beginCertificateOrderMutex.RLock()
	defer fake.beginCertificateOrderMutex.RUnlock()
	fake.solveAuthorizationsMutex.RLock()
	defer fake.solveAuthorizationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCertificateObtainer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ letsencrypt.CertificateObtainerInterface = new(FakeCertificateObtainer)
