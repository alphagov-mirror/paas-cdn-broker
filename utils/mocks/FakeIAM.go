// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/alphagov/paas-cdn-broker/lego/acme"
	"github.com/alphagov/paas-cdn-broker/utils"
	"github.com/aws/aws-sdk-go/service/iam"
)

type FakeIAM struct {
	DeleteCertificateStub        func(string) error
	deleteCertificateMutex       sync.RWMutex
	deleteCertificateArgsForCall []struct {
		arg1 string
	}
	deleteCertificateReturns struct {
		result1 error
	}
	deleteCertificateReturnsOnCall map[int]struct {
		result1 error
	}
	ListCertificatesStub        func(func(iam.ServerCertificateMetadata) bool) error
	listCertificatesMutex       sync.RWMutex
	listCertificatesArgsForCall []struct {
		arg1 func(iam.ServerCertificateMetadata) bool
	}
	listCertificatesReturns struct {
		result1 error
	}
	listCertificatesReturnsOnCall map[int]struct {
		result1 error
	}
	UploadCertificateStub        func(string, acme.CertificateResource) (string, error)
	uploadCertificateMutex       sync.RWMutex
	uploadCertificateArgsForCall []struct {
		arg1 string
		arg2 acme.CertificateResource
	}
	uploadCertificateReturns struct {
		result1 string
		result2 error
	}
	uploadCertificateReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIAM) DeleteCertificate(arg1 string) error {
	fake.deleteCertificateMutex.Lock()
	ret, specificReturn := fake.deleteCertificateReturnsOnCall[len(fake.deleteCertificateArgsForCall)]
	fake.deleteCertificateArgsForCall = append(fake.deleteCertificateArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteCertificate", []interface{}{arg1})
	fake.deleteCertificateMutex.Unlock()
	if fake.DeleteCertificateStub != nil {
		return fake.DeleteCertificateStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteCertificateReturns
	return fakeReturns.result1
}

func (fake *FakeIAM) DeleteCertificateCallCount() int {
	fake.deleteCertificateMutex.RLock()
	defer fake.deleteCertificateMutex.RUnlock()
	return len(fake.deleteCertificateArgsForCall)
}

func (fake *FakeIAM) DeleteCertificateCalls(stub func(string) error) {
	fake.deleteCertificateMutex.Lock()
	defer fake.deleteCertificateMutex.Unlock()
	fake.DeleteCertificateStub = stub
}

func (fake *FakeIAM) DeleteCertificateArgsForCall(i int) string {
	fake.deleteCertificateMutex.RLock()
	defer fake.deleteCertificateMutex.RUnlock()
	argsForCall := fake.deleteCertificateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAM) DeleteCertificateReturns(result1 error) {
	fake.deleteCertificateMutex.Lock()
	defer fake.deleteCertificateMutex.Unlock()
	fake.DeleteCertificateStub = nil
	fake.deleteCertificateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAM) DeleteCertificateReturnsOnCall(i int, result1 error) {
	fake.deleteCertificateMutex.Lock()
	defer fake.deleteCertificateMutex.Unlock()
	fake.DeleteCertificateStub = nil
	if fake.deleteCertificateReturnsOnCall == nil {
		fake.deleteCertificateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteCertificateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAM) ListCertificates(arg1 func(iam.ServerCertificateMetadata) bool) error {
	fake.listCertificatesMutex.Lock()
	ret, specificReturn := fake.listCertificatesReturnsOnCall[len(fake.listCertificatesArgsForCall)]
	fake.listCertificatesArgsForCall = append(fake.listCertificatesArgsForCall, struct {
		arg1 func(iam.ServerCertificateMetadata) bool
	}{arg1})
	fake.recordInvocation("ListCertificates", []interface{}{arg1})
	fake.listCertificatesMutex.Unlock()
	if fake.ListCertificatesStub != nil {
		return fake.ListCertificatesStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listCertificatesReturns
	return fakeReturns.result1
}

func (fake *FakeIAM) ListCertificatesCallCount() int {
	fake.listCertificatesMutex.RLock()
	defer fake.listCertificatesMutex.RUnlock()
	return len(fake.listCertificatesArgsForCall)
}

func (fake *FakeIAM) ListCertificatesCalls(stub func(func(iam.ServerCertificateMetadata) bool) error) {
	fake.listCertificatesMutex.Lock()
	defer fake.listCertificatesMutex.Unlock()
	fake.ListCertificatesStub = stub
}

func (fake *FakeIAM) ListCertificatesArgsForCall(i int) func(iam.ServerCertificateMetadata) bool {
	fake.listCertificatesMutex.RLock()
	defer fake.listCertificatesMutex.RUnlock()
	argsForCall := fake.listCertificatesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIAM) ListCertificatesReturns(result1 error) {
	fake.listCertificatesMutex.Lock()
	defer fake.listCertificatesMutex.Unlock()
	fake.ListCertificatesStub = nil
	fake.listCertificatesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAM) ListCertificatesReturnsOnCall(i int, result1 error) {
	fake.listCertificatesMutex.Lock()
	defer fake.listCertificatesMutex.Unlock()
	fake.ListCertificatesStub = nil
	if fake.listCertificatesReturnsOnCall == nil {
		fake.listCertificatesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listCertificatesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAM) UploadCertificate(arg1 string, arg2 acme.CertificateResource) (string, error) {
	fake.uploadCertificateMutex.Lock()
	ret, specificReturn := fake.uploadCertificateReturnsOnCall[len(fake.uploadCertificateArgsForCall)]
	fake.uploadCertificateArgsForCall = append(fake.uploadCertificateArgsForCall, struct {
		arg1 string
		arg2 acme.CertificateResource
	}{arg1, arg2})
	fake.recordInvocation("UploadCertificate", []interface{}{arg1, arg2})
	fake.uploadCertificateMutex.Unlock()
	if fake.UploadCertificateStub != nil {
		return fake.UploadCertificateStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.uploadCertificateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIAM) UploadCertificateCallCount() int {
	fake.uploadCertificateMutex.RLock()
	defer fake.uploadCertificateMutex.RUnlock()
	return len(fake.uploadCertificateArgsForCall)
}

func (fake *FakeIAM) UploadCertificateCalls(stub func(string, acme.CertificateResource) (string, error)) {
	fake.uploadCertificateMutex.Lock()
	defer fake.uploadCertificateMutex.Unlock()
	fake.UploadCertificateStub = stub
}

func (fake *FakeIAM) UploadCertificateArgsForCall(i int) (string, acme.CertificateResource) {
	fake.uploadCertificateMutex.RLock()
	defer fake.uploadCertificateMutex.RUnlock()
	argsForCall := fake.uploadCertificateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIAM) UploadCertificateReturns(result1 string, result2 error) {
	fake.uploadCertificateMutex.Lock()
	defer fake.uploadCertificateMutex.Unlock()
	fake.UploadCertificateStub = nil
	fake.uploadCertificateReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeIAM) UploadCertificateReturnsOnCall(i int, result1 string, result2 error) {
	fake.uploadCertificateMutex.Lock()
	defer fake.uploadCertificateMutex.Unlock()
	fake.UploadCertificateStub = nil
	if fake.uploadCertificateReturnsOnCall == nil {
		fake.uploadCertificateReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.uploadCertificateReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeIAM) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteCertificateMutex.RLock()
	defer fake.deleteCertificateMutex.RUnlock()
	fake.listCertificatesMutex.RLock()
	defer fake.listCertificatesMutex.RUnlock()
	fake.uploadCertificateMutex.RLock()
	defer fake.uploadCertificateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIAM) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ utils.IamIface = new(FakeIAM)
